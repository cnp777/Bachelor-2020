# Data
#-----------------
setwd("~/Desktop")
optionsdata <- read.table("optionsdata.txt", header = TRUE)
optionsdata$Date <- as.Date(optionsdata$Date)

# Tilføj rk_th2 til optionsdatasættet
OxfordMan <- read.csv2(file="OxfordManRealizedVolatilityIndices.csv",sep=",",header=TRUE, skipNul = TRUE,
                       colClasses = c(rep("character",2),rep("character",20-2)))
OxfordMan <- subset(OxfordMan, Symbol=='.SPX')
names(OxfordMan)[1] <- c('date')
OxfordMan2 <- subset(OxfordMan, select=-c(Symbol, open_to_close, open_time, close_time, nobs, open_price))

# annualiser volatiliteten
vol_an <- function(x){sqrt(as.numeric(x))*sqrt(252)}
OxfordMan3 <- OxfordMan2[, c(1,5,2:6,7:dim(OxfordMan2)[2])]
names(OxfordMan3)[1] <- c('Date')
colsNum <- 2:dim(OxfordMan2)[2]
OxfordMan3[, colsNum] <- apply(OxfordMan3[,colsNum], 2, vol_an)

# lav datasæt kun med dato og rk_th2
OxfordMan4 <- subset(OxfordMan3, select= c(Date, rk_th2))
OxfordMan4$Date <- as.Date(OxfordMan4$Date)

# forkort datasættet så datoerne matcher med optionsdata.txt 
optionsdata$Date

# Slet samples 2000-01-03:2004-03-31 og 2013-07-02:2020-05-01
OxfordMan5 <- OxfordMan4[OxfordMan4$Date >= "2004-04-01" & OxfordMan4$Date <= "2013-07-03",]
optionsdata <- optionsdata[optionsdata$Date >= "2004-04-01" & optionsdata$Date <= "2013-07-03",]

# Merge de to datasæt
df <- merge(optionsdata, OxfordMan5, by = "Date", all.x = TRUE)
dim(df)[1]
summary(df) # kun NAs i rk_th2
sum(is.na(df$rk_th2))
# erstat NAs
library(zoo)
df$rk_th2 <- na.approx(df$rk_th2)
summary(df)

#-----------------

# Funktioner
#-----------------
d1 <- function(S,K,r,q,sigma,tau){(log(S/K)+(r-q)*tau + 1/2*sigma^2*tau)/(sigma*sqrt(tau))}
d2 <- function(S,K,r,q,sigma,tau){d1(S,K,r,q,sigma,tau) - sigma*sqrt(tau)}
C_BS <- function(S,K,r,q,sigma,tau,option="Call"){
  d1 <- d1(S,K,r,q,sigma,tau)
  d2 <- d2(S,K,r,q,sigma,tau)
  if (option=="Call"){result <- exp(-q*tau)*S*pnorm(d1) - K*exp(-r*tau)*pnorm(d2)}
  if (option=="Put"){result <-  exp(-q*tau)*S*pnorm(d1) - K*exp(-r*tau)*pnorm(d2) -exp(-q*tau)*S + K*exp(-r*tau)}
  result
}
C_BS <- Vectorize(C_BS) 
Delta <- function(S,K,r,q,sigma,tau,option="Call"){
  if (option == "Call"){result <-  exp(-q*tau)*pnorm(d1(S,K,r,q,sigma,tau))}
  if (option == "Put"){result <-  exp(-q*tau)*(pnorm(d1(S,K,r,q,sigma,tau))-1)}
  result
}
Delta <- Vectorize(Delta)

delta_hedge <- function(S,K,r,q,sigma,tau,call_price,strategy,option="Call"){
  
  delta   <- Delta(S=S,K=K,r=r,q=q, sigma=sigma,tau=tau, option=option)
  
  n            <- length(S[-length(S)])
  V            <- numeric(n+1);V[1]   <- call_price[1] # Value process 
  Pi           <- numeric(n+1);Pi[1]  <- 0  ### Path of PL/Hedging Error
  dPi          <- numeric(n+1);dPi[1] <- 0  ### Hedging error over time interval
  
  if (length(r)==1){r<-rep(r,n)}
  if (length(q)==1){q<-rep(q,n)}
  
  for (i in 1:n){
    B       <- Pi[i] + strategy*delta[i]*S[i] - strategy*call_price[i] # Rebalance with money account
    V[i+1]  <- exp(r[i]*dt)*B - strategy*delta[i]*exp(q[i]*dt)*S[i+1] # Mark-to-market for portfolio
    Pi[i+1] <- V[i+1] + strategy*call_price[i+1] # Mark-to-market for adjusted portfolio/cumulated hedging error
    dPi[i+1] <- Pi[i+1] - Pi[i] 
  }
  list(delta = delta, error_cum = Pi, error_dt = dPi, pf_value = V) 
}
square <- function(x){x^2}

#-----------------

# Plots 
#-----------------
df_14 <- subset(df, Option == 14)
df_14$implied <- df_14$sigma
df_14$Date <- as.Date(df_14$Date)
call_prices <- C_BS(S=df_14$S, K=df_14$K[1], r=df_14$r,q=0, sigma=df_14$sigma,tau=df_14$tau)
delta <- delta_hedge(S=df_14$S, K=df_14$K[1], r=df_14$r,q=0, sigma=df_14$sigma,tau=df_14$tau,call_price = call_prices,strategy=-1, option = "Call")[[1]]
error_cum <- delta_hedge(S=df_14$S,K=df_14$K[1],r=df_14$r,q=0,sigma=df_14$sigma, tau=df_14$tau, call_price=call_prices,strategy=-1,option="Call")[[2]]
error_dt <- delta_hedge(S=df_14$S,K=df_14$K[1],r=df_14$r,q=0,sigma=df_14$sigma, tau=df_14$tau, call_price=call_prices,strategy=-1,option="Call")[[3]]
pf_value <- delta_hedge(S=df_14$S,K=df_14$K[1],r=df_14$r,q=0,sigma=df_14$sigma, tau=df_14$tau, call_price=call_prices,strategy=-1,option="Call")[[4]]
df_dataframe <- data.frame(Date=df_14$Date, aktie=df_14$S, call=call_prices, delta=delta, error_cum=error_cum, error_dt=error_dt, pf_value=pf_value)

# Volatilitetplot
vol_names <- c( 'rk_th2','implied')
df_vol <- melt(df_14, measure.vars = vol_names, id.vars = c('Date'))
ggplot(data=df_vol, aes(x=Date, y=value, color = variable)) +
  geom_line() +
  xlab("Dato") +
  ylab("Værdi") +
  ggtitle("Volatilitet, Option 14") +
  theme(plot.title = element_text(lineheight=0.8, face="bold",vjust=1), 
        axis.text.x = element_text(angle = 45, hjust = 1))

# Aktiekurs vs Call pris
df_melt <- melt(df_dataframe, id.vars = c('Date'), measure.vars = c("aktie", "call"))
ggplot(data=df_melt, aes(x=Date, y=value, color=variable)) + 
  geom_line(size=1) +
  geom_hline(aes(yintercept=df_14$K[1])) +
  geom_hline(aes(yintercept=0)) +
  xlab("Tid") +
  ylab("Værdi") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Aktie Pris vs. Call Pris")+
  theme(plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))
        
# Delta plot 
df_melt1 <- melt(df_dataframe, id = "Date", measure.vars = c("delta"))
str(df_melt1)
ggplot(data=df_melt1, aes(x=Date, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Værdi") +
  ylim(c(0,1)) +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Delta vs. Gamma")+
  theme(plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))

# Daglig og kummuleret hedge error
df_error <- data.frame(Date=df_14$Date, error=error_cum, error_dt=error_dt)
df_melt2 <- melt(df_error, id = "Date", measure.vars = c("error", "error_dt"))
ggplot(data=df_melt2, aes(x=Date, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Værdi") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Hedging Error")+
  theme(plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))
