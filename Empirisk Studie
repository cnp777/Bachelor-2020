#### Data
#-----------------
optionsdata <- read.table("optionsdata.txt", header = TRUE)
optionsdata$Date <- as.Date(optionsdata$Date)

# Tilføj rk_th2 til optionsdatasættet
OxfordMan <- read.csv2(file="OxfordManRealizedVolatilityIndices.csv",sep=",",header=TRUE, skipNul = TRUE,
                       colClasses = c(rep("character",2),rep("character",20-2)))
OxfordMan <- subset(OxfordMan, Symbol=='.SPX')
names(OxfordMan)[1] <- c('date')
OxfordMan2 <- subset(OxfordMan, select=-c(Symbol, open_to_close, open_time, close_time, nobs, open_price))

# annualiser volatiliteten
vol_an <- function(x){sqrt(as.numeric(x))*sqrt(252)}
OxfordMan3 <- OxfordMan2[, c(1,5,2:6,7:dim(OxfordMan2)[2])]
names(OxfordMan3)[1] <- c('Date')
colsNum <- 2:dim(OxfordMan2)[2]
OxfordMan3[, colsNum] <- apply(OxfordMan3[,colsNum], 2, vol_an)

# lav datasæt kun med dato og rk_th2
OxfordMan4 <- subset(OxfordMan3, select= c(Date, rk_th2))
OxfordMan4$Date <- as.Date(OxfordMan4$Date)

# forkort datasættet så datoerne matcher med optionsdata.txt 
optionsdata$Date
# Slet samples 2000-01-03:2004-03-31 og 2013-07-02:2020-05-01
OxfordMan5 <- OxfordMan4[OxfordMan4$Date >= "2004-04-01" & OxfordMan4$Date <= "2013-07-03",]
optionsdata <- optionsdata[optionsdata$Date >= "2004-04-01" & optionsdata$Date <= "2013-07-03",]

# Merge de to datasæt
df <- merge(optionsdata, OxfordMan5, by = "Date", all.x = TRUE)
dim(df)[1]
summary(df) # kun NAs i rk_th2
sum(is.na(df$rk_th2))
# erstat NAs
library(zoo)
df$rk_th2 <- na.approx(df$rk_th2)
#-----------------

#### Funktioner
#-----------------
d1 <- function(S,K,r,q,sigma,tau){(log(S/K)+(r-q)*tau + 1/2*sigma^2*tau)/(sigma*sqrt(tau))}
d2 <- function(S,K,r,q,sigma,tau){d1(S,K,r,q,sigma,tau) - sigma*sqrt(tau)}
C_BS <- function(S,K,r,q,sigma,tau,option="Call"){
  d1 <- d1(S,K,r,q,sigma,tau)
  d2 <- d2(S,K,r,q,sigma,tau)
  if (option=="Call"){result <- exp(-q*tau)*S*pnorm(d1) - K*exp(-r*tau)*pnorm(d2)}
  if (option=="Put"){result <-  exp(-q*tau)*S*pnorm(d1) - K*exp(-r*tau)*pnorm(d2) -exp(-q*tau)*S + K*exp(-r*tau)}
  result
}
C_BS <- Vectorize(C_BS) 
Delta <- function(S,K,r,q,sigma,tau,option="Call"){
  if (option == "Call"){result <-  exp(-q*tau)*pnorm(d1(S,K,r,q,sigma,tau))}
  if (option == "Put"){result <-  exp(-q*tau)*(pnorm(d1(S,K,r,q,sigma,tau))-1)}
  result
}
Delta <- Vectorize(Delta)

delta_hedge <- function(S,K,r,q,sigma,tau,call_price,strategy,option="Call"){
  
  delta   <- Delta(S=S,K=K,r=r,q=q, sigma=sigma,tau=tau, option=option)
  
  n            <- length(S[-length(S)])
  V            <- numeric(n+1);V[1]   <- call_price[1] # Value process 
  Pi           <- numeric(n+1);Pi[1]  <- 0  ### Path of PL/Hedging Error
  dPi          <- numeric(n+1);dPi[1] <- 0  ### Hedging error over time interval
  
  if (length(r)==1){r<-rep(r,n)}
  if (length(q)==1){q<-rep(q,n)}
  
  for (i in 1:n){
    B       <- Pi[i] + strategy*delta[i]*S[i] - strategy*call_price[i] # Rebalance with money account
    V[i+1]  <- exp(r[i]*dt)*B - strategy*delta[i]*exp(q[i]*dt)*S[i+1] # Mark-to-market for portfolio
    Pi[i+1] <- V[i+1] + strategy*call_price[i+1] # Mark-to-market for adjusted portfolio/cumulated hedging error
    dPi[i+1] <- Pi[i+1] - Pi[i] 
  }
  list(delta = delta, error_cum = Pi, error_dt = dPi) 
}
square <- function(x){x^2}
#-----------------

# Test af volatilitet (always short strategi)
#-----------------
result_impliedvol <- matrix(NA, nrow = 63, ncol = 37)
result_rv5vol <- matrix(NA, nrow = 63, ncol = 37)
result_rkth2vol <- matrix(NA, nrow = 63, ncol = 37)
result_naivevol <- matrix(NA, nrow = 63, ncol = 37)
quad_error_vol <- matrix(NA, nrow = 4, ncol = 37)

for (i in 1:37){
  df_i <- subset(df, Option == i )
  dt <- diff(df_i$t)[1]
  C <- C_BS(S=df_i$S, K=df_i$K[1], r=df_i$r, q=0,sigma=df_i$sigma,tau=df_i$tau,option = "Call")

  result_impliedvol[,i] <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$sigma,call_price = C, strategy = -1, option="Call")[[2]]
  result_rv5vol[,i] <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$rv5,call_price = C, strategy = -1, option="Call")[[2]]
  result_rkth2vol[,i] <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$rk_th2,call_price = C, strategy = -1, option="Call")[[2]]
  result_naivevol[,i] <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$naive,call_price = C, strategy = -1, option="Call")[[2]]
  
  quad_error_vol[1,i] <- (1/63)*sum(sapply(delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$sigma,call_price = C, strategy = -1, option="Call")[[3]], FUN = square))
  quad_error_vol[2,i] <- (1/63)*sum(sapply(delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$rv5,call_price = C, strategy = -1, option="Call")[[3]], FUN = square))
  quad_error_vol[3,i] <- (1/63)*sum(sapply(delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$rk_th2,call_price = C, strategy = -1, option="Call")[[3]], FUN = square))
  quad_error_vol[4,i] <- (1/63)*sum(sapply(delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0, tau=df_i$tau,sigma=df_i$naive,call_price = C, strategy = -1, option="Call")[[3]], FUN = square))
  
}

### plots
library(ggplot2)
library(reshape2)

# implied 
data_imp <- as.data.frame(result_impliedvol)
df_t <- subset(df, Option == 1)
data_imp$time <- df_t$t
data_imp_melt <- melt(data_imp, id = "time")
str(data_imp_melt)

q_implied <- ggplot(data=data_imp_melt, aes(x=time, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Hedging Error") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Implied")+
  theme(legend.position = "none", plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))
# rv5 
data_rv5 <- as.data.frame(result_rv5vol)
data_rv5$time <- df_i$t
data_rv5_melt <- melt(data_rv5, id = "time")
str(data_rv5_melt)

q_rv5 <- ggplot(data=data_rv5_melt, aes(x=time, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Hedging Error") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("rv5")+
  theme(legend.position = "none", plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))
# rk_th2 
data_rkth2 <- as.data.frame(result_rkth2vol)
data_rkth2$time <- df_i$t
data_rkth2_melt <- melt(data_rkth2, id = "time")
str(data_rkth2_melt)

q_rkth2 <- ggplot(data=data_rkth2_melt, aes(x=time, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Hedging Error") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("rk_th2")+
  theme(legend.position = "none", plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))
# naive 
data_naive <- as.data.frame(result_naivevol)
data_naive$time <- df_i$t
data_naive_melt <- melt(data_naive, id = "time")
str(data_naive_melt)

q_naive <- ggplot(data=data_naive_melt, aes(x=time, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Hedging Error") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("naive")+
  theme(legend.position = "none",plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1)) 
 
 ### tabel (mean og sd)

mean(quad_error_vol[1,])     # implied vol -> quad variation mean = 0.56
sd(quad_error_vol[1,])       # implied vol -> quad variation std = 0.98
mean(quad_error_vol[2,])     # rv5 vol -> quad variation mean = 3.51
sd(quad_error_vol[2,])       # rv5 vol -> quad variation std = 9.58
mean(quad_error_vol[3,])     # rk_th2 vol -> quad variation mean = 3.31
sd(quad_error_vol[3,])       # rk_th2 vol -> quad variation std = 8.76
mean(quad_error_vol[4,])     # naive vol -> quad variation mean = 2.73
sd(quad_error_vol[4,])       # naive vol -> quad variation std = 2.28

mean(result_impliedvol[63,]) # implied vol -> cum. P&L mean = 4.26 
sd(result_impliedvol[63,])   # implied vol -> cum. P&L std = 12.91
mean(result_rv5vol[63,])     # rv5 vol -> cum. P&L mean = 5.01
sd(result_rv5vol[63,])       # rv5 vol -> cum. P&L std = 13.71
mean(result_rkth2vol[63,])   # rk_th2 vol -> cum. P&L mean = 4.92
sd(result_rkth2vol[63,])     # rk_th2 vol -> cum. P&L std = 14.09
mean(result_naivevol[63,])   # naive vol -> cum. P&L mean = 6.90
sd(result_naivevol[63,])     # naive vol -> cum. P&L std = 17.13

### t-tests 
t.test(quad_error_vol[3,],quad_error_vol[4,], alternative = c("two.sided")) # p = 0.6974 > 0.05
t.test(result_rkth2vol[63,],result_naivevol[63,], alternative = c("two.sided")) # p = 0.5883 > 0.05

### F-test
var.test(result_rkth2vol[63,],result_naivevol[63,], alternative = c("two.sided")) # p = 0.2466 > 0.05



# Test af volatilitet (artikel strategi)
#-----------------

result_rkth2 <- matrix(NA, nrow = 63, ncol = 37)
result_imp <- matrix(NA, nrow = 63, ncol = 37)
strategymatrix <- matrix(NA, nrow = 1, ncol = 37)
callmean <- matrix(NA, nrow = 1, ncol = 37)
quad_error <- matrix(NA, nrow = 2, ncol = 37)
delta_rkth2 <- matrix(NA, nrow = 63, ncol = 37)
delta_imp <- matrix(NA, nrow = 63, ncol = 37)

for (i in 1:37){
  df_i <- subset(df, Option == i)
  dt <- diff(df_i$t)[1]
  C <- C_BS(S=df_i$S, K=df_i$K[1], r=df_i$r, q=0,sigma=df_i$sigma,tau=df_i$tau,option = "Call")
  
    if (df_i$sigma[1]>df_i$rk_th2[1]){strategy <- -1}
    else{strategy <- 1}
  
  strategymatrix[, i] <- strategy

  result_rkth2[,i] <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0,sigma=df_i$rk_th2, tau=df_i$tau, call_price=C,strategy=strategy,option="Call")[[2]]
  result_imp[,i]   <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0,sigma=df_i$sigma, tau=df_i$tau, call_price=C,strategy=strategy,option="Call")[[2]]
  
  delta_rkth2[,i]  <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0,sigma=df_i$rk_th2, tau=df_i$tau, call_price=C,strategy=strategy,option="Call")[[1]]
  delta_imp[,i]    <- delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0,sigma=df_i$sigma, tau=df_i$tau, call_price=C,strategy=strategy,option="Call")[[1]]
  
  quad_error[1,i] <- (1/length(df_i[,1]))*sum(sapply(delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0,sigma=df_i$rk_th2, tau=df_i$tau, call_price=C,strategy=strategy,option="Call")[[3]], FUN = square))
  quad_error[2,i] <- (1/length(df_i[,1]))*sum(sapply(delta_hedge(S=df_i$S,K=df_i$K[1],r=df_i$r,q=0,sigma=df_i$sigma, tau=df_i$tau, call_price=C,strategy=strategy,option="Call")[[3]], FUN = square))
  
  callmean[,i] <- mean(C)
}

### tabel (mean og sd)
mean(quad_error[2,])    # implied vol  -> quad variation mean = 0.57
sd(quad_error[2,])      # implied vol -> quad variation std = 0.98
mean(quad_error[1,])    # rk_th2 vol -> quad variation mean = 3.31
sd(quad_error[1,])      # rk_th2 vol -> quad variation std = 8.76
mean(result_imp[63,])   # implied vol -> cum. P&L mean = 6.33
sd(result_imp[63,])     # implied vol -> cum. P&L std = 11.96
mean(result_rkth2[63,]) # rk_th2 vol -> cum. P&L mean = 5.30
sd(result_rkth2[63,])   # rk_th2 vol -> cum. P&L std = 13.95

### plots 
data_imp <- as.data.frame(result_imp)
df_time <- subset(df, Option == 1)
data_imp$time <- df_time$t
str(data_imp)
data_imp_melt <- melt(data_imp, id = "time")
str(data_imp_melt)

q_implied <- ggplot(data=data_imp, aes(x=time, y=value, color=c('short','long'))) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Hedging Error") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Hedging med implicit volatilitet")+
  theme(legend.position = "none", plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))

data_rkth2 <- as.data.frame(result_rkth2)
data_rkth2$time <- df_i$t
data_rkth2_melt <- melt(data_rkth2, id = "time")
str(data_rkth2_melt)
q_rkth2 <- ggplot(data=data_rkth2_melt, aes(x=time, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Hedging Error") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Hedging med sand volatilitet (rk_th2)")+
  theme(legend.position = "none", plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))

library(gridExtra)
grid.arrange(q_rkth2, q_implied, ncol = 2)

# delta plot
data_delta_imp <- as.data.frame(delta_imp)
df_time <- subset(df, Option == 1)
data_delta_imp$time <- df_time$t
data_delta_imp_melt <- melt(data_delta_imp, id = "time", measure.vars = c("V1", "V2","V3","V4","V5","V6","V7","V8","V9","V10"))
str(data_delta_imp_melt)
d1 <- ggplot(data=data_delta_imp_melt, aes(x=time, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Delta") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Implicit (1-10)")+
  theme(legend.position = "none", plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))

data_delta_rkth2 <- as.data.frame(delta_rkth2)
df_time <- subset(df, Option == 1)
data_delta_rkth2$time <- df_time$t
data_delta_rkth2_melt <- melt(data_delta_rkth2, id = "time", measure.vars = c("V1", "V2","V3","V4","V5","V6","V7","V8","V9","V10"))
str(data_delta_rkth2_melt)
d2 <- ggplot(data=data_delta_rkth2_melt, aes(x=time, y=value, color=variable)) + 
  geom_line(size=1) +
  xlab("Tid") +
  ylab("Delta") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("rk_th2 (1-10)")+
  theme(legend.position = "none", plot.title = element_text(lineheight=0.8) # face="bold"
        ,axis.text.x = element_text(angle = 0, hjust = 1,vjust=1))

library(gridExtra)
grid.arrange(d1, d2, ncol = 2)

### Sharpe Ratio
mean(callmean) # = 45.78118
mean(df$r)     # = 0.02
(4*6.33/45.78-0.02)/(sqrt(4)*11.96/45.78) # implied = 1.02 
(4*5.30/45.78-0.02)/(sqrt(4)*13.95/45.78) # rkth2 =  0.73



